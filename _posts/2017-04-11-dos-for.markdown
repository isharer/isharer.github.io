---
layout:     post
title:      "DOS命令之For命令浅尝"
subtitle:   " \"通过一个简单的实例应用学习for命令\""
date:       2017-04-11 12:00:00
author:     "Zhk"
header-img: "img/post-bg-2017.jpg"
catalog: true
tags:
    - DOS
---

## 闲话 ##

因为公司业务需要，为新入职的同事进行基础的入职培训，而负责者有幸落在老夫身上。遂进行一番整理备课，怀着激动的心情体验一下即将当老师的快感：）【猥琐脸】。在整理课程资料的时候，想列出资料文件清单到资料文件夹根目录，作为资料审查目录。由于，文件实在太多实在不想ctrl-c/v。于是，想到使用dos命令来实现，目录清单的一个自动生成。顺便也学习回顾一下for命令的使用。

好了，扯了这么多，直接开始~

## Dos 命令 For ##

### 命令使用简单说明 ###

首先，我们使用如下命令获取dos命令系统自带说明帮助文档信息并存放到dos_for_help.txt文件中：

```
C:\>help for > dos_for_help.txt 
或者
C:\>for /? > dos_for_help.txt
```

然后，我们打开文件内容，会发现，文本中对for命令的使用做了非常详细的说明同时还附有一些示例。下面，我们讲参照该文档说明来完成，我们要做的事情。友情附上文档内容如下：

	对一组文件中的每一个文件执行某个特定命令。

	FOR %variable IN (set) DO command [command-parameters]
	
	  %variable  指定一个单一字母可替换的参数。
	  (set)      指定一个或一组文件。可以使用通配符。
	  command    指定对每个文件执行的命令。
	  command-parameters
	             为特定命令指定参数或命令行开关。
	
	在批处理程序中使用 FOR 命令时，指定变量请使用 %%variable 
	而不要用 %variable。变量名称是区分大小写的，所以 %i 不同于 %I.
	
	如果启用命令扩展，则会支持下列 FOR 命令的其他格式:
	
	FOR /D %variable IN (set) DO command [command-parameters]
	
	    如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。
	
	FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]
	
	    检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。
	    如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，
	    则枚举该目录树。
	
	FOR /L %variable IN (start,step,end) DO command [command-parameters]
	
	    该集表示以增量形式从开始到结束的一个数字序列。因此，(1,1,5)将产生序列
	    1 2 3 4 5，(5,-1,1)将产生序列(5 4 3 2 1)
	
	FOR /F ["options"] %variable IN (file-set) DO command [command-parameters]
	FOR /F ["options"] %variable IN ("string") DO command [command-parameters]
	FOR /F ["options"] %variable IN ('command') DO command [command-parameters]
	
	    或者，如果有 usebackq 选项:
	
	FOR /F ["options"] %variable IN (file-set) DO command [command-parameters]
	FOR /F ["options"] %variable IN ("string") DO command [command-parameters]
	FOR /F ["options"] %variable IN ('command') DO command [command-parameters]
	
	    fileset 为一个或多个文件名。继续到 fileset 中的下一个文件之前，
	    每份文件都被打开、读取并经过处理。处理包括读取文件，将其分成一行行的文字，
	    然后将每行解析成零或更多的符号。然后用已找到的符号字符串变量值调用 For 循环。
	    以默认方式，/F 通过每个文件的每一行中分开的第一个空白符号。跳过空白行。
	    你可通过指定可选 "options" 参数替代默认解析操作。这个带引号的字符串包括一个
	    或多个指定不同解析选项的关键字。这些关键字为:
	
	        eol=c           - 指一个行注释字符的结尾(就一个)
	        skip=n          - 指在文件开始时忽略的行数。
	        delims=xxx      - 指分隔符集。这个替换了空格和制表符的
	                          默认分隔符集。
	        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代
	                          的 for 本身。这会导致额外变量名称的分配。m-n
	                          格式为一个范围。通过 nth 符号指定 mth。如果
	                          符号字符串中的最后一个字符星号，
	                          那么额外的变量将在最后一个符号解析之后
	                          分配并接受行的保留文本。
	        usebackq        - 指定新语法已在下类情况中使用:
	                          在作为命令执行一个后引号的字符串并且一个单
	                          引号字符为文字字符串命令并允许在 file-set
	                          中使用双引号扩起文件名称。
	
	    某些范例可能有助:
	
	FOR /F "eol=; tokens=2,3* delims=, " %i in (myfile.txt) do @echo %i %j %k
	
	    会分析 myfile.txt 中的每一行，忽略以分号打头的那些行，将
	    每行中的第二个和第三个符号传递给 for 函数体，用逗号和/或
	    空格分隔符号。请注意，此 for 函数体的语句引用 %i 来
	    获得第二个符号，引用 %j 来获得第三个符号，引用 %k
	    来获得第三个符号后的所有剩余符号。对于带有空格的文件
	    名，你需要用双引号将文件名括起来。为了用这种方式来使
	    用双引号，还需要使用 usebackq 选项，否则，双引号会
	    被理解成是用作定义某个要分析的字符串的。
	
	    %i 在 for 语句中显式声明，%j 和 %k 是通过
	    tokens= 选项隐式声明的。可以通过 tokens= 一行
	    指定最多 26 个符号，只要不试图声明一个高于字母 "z" 或
	    "Z" 的变量。请记住，FOR 变量是单一字母、分大小写和全局的变量；
	    而且，不能同时使用超过 52 个。
	
	    还可以在相邻字符串上使用 FOR /F 分析逻辑，方法是，
	    用单引号将括号之间的 file-set 括起来。这样，该字符
	    串会被当作一个文件中的一个单一输入行进行解析。
	
	    最后，可以用 FOR /F 命令来分析命令的输出。方法是，将
	    括号之间的 file-set 变成一个反括字符串。该字符串会
	    被当作命令行，传递到一个子 CMD.EXE，其输出会被捕获到
	    内存中，并被当作文件分析。如以下例子所示:
	
	      FOR /F "usebackq delims==" %i IN (`set`) DO @echo %i
	
	    会枚举当前环境中的环境变量名称。
	
	另外，FOR 变量参照的替换已被增强。你现在可以使用下列
	选项语法:
	
	     %~I          - 删除任何引号(")，扩展 %I
	     %~fI        - 将 %I 扩展到一个完全合格的路径名
	     %~dI        - 仅将 %I 扩展到一个驱动器号
	     %~pI        - 仅将 %I 扩展到一个路径
	     %~nI        - 仅将 %I 扩展到一个文件名
	     %~xI        - 仅将 %I 扩展到一个文件扩展名
	     %~sI        - 扩展的路径只含有短名
	     %~aI        - 将 %I 扩展到文件的文件属性
	     %~tI        - 将 %I 扩展到文件的日期/时间
	     %~zI        - 将 %I 扩展到文件的大小
	     %~$PATH:I   - 查找列在路径环境变量的目录，并将 %I 扩展
	                   到找到的第一个完全合格的名称。如果环境变量名
	                   未被定义，或者没有找到文件，此组合键会扩展到
	                   空字符串
	
	可以组合修饰符来得到多重结果:
	
	     %~dpI       - 仅将 %I 扩展到一个驱动器号和路径
	     %~nxI       - 仅将 %I 扩展到一个文件名和扩展名
	     %~fsI       - 仅将 %I 扩展到一个带有短名的完整路径名
	     %~dp$PATH:I - 搜索列在路径环境变量的目录，并将 %I 扩展
	                   到找到的第一个驱动器号和路径。
	     %~ftzaI     - 将 %I 扩展到类似输出线路的 DIR
	
	在以上例子中，%I 和 PATH 可用其他有效数值代替。%~ 语法
	用一个有效的 FOR 变量名终止。选取类似 %I 的大写变量名
	比较易读，而且避免与不分大小写的组合键混淆。

这里我们先看一下，我们要做什么，然后在结合上面的文档进行实现。

- 目标

在文本文件中罗列出文件目录清单，当然，我们可以使用tree命令很简单就能实现。这里我们为了学习for循环就不采用这种方式了。首先，我们可以使用tree命令看看我们最终需要的效果清单，比如，我要获取 “D:\资料\培训\软件工具” 目录底下的文件清单，我们就可以这样：

```
D:\资料\培训\软件工具>tree /f
```

附上结果：
	
	
	D:\资料\培训\软件工具>tree /f
	卷 LENOVO 的文件夹 PATH 列表
	卷序列号为 00000047 B678:A6D1
	D:.
	├─IDE
	│      ideaIU-2017.1.exe
	│      ideaIU-2017.1注册码.txt
	│
	├─JDK
	│      jdk-8u121-windows-x64-demos.zip
	│      jdk-8u121-windows-x64_8.0.1210.13.exe
	│
	├─数据库及管理工具
	│      HeidiSQL_9.4.0.5125_Setup.exe
	│      mysql-5.7.17.msi
	│      navicat112_mysql_cs_x64.exe
	│
	├─服务器
	│      apache-tomcat-9.0.0.M19-windows-x64.zip
	│      nginx-1.11.13.zip
	│
	├─构建工具
	│      apache-maven-3.3.9-bin.zip
	│
	├─版本控制工具
	│      Git_2.12_64.exe
	│
	├─编辑器
	│      gvim80.exe
	│      markdownpad2-setup.exe
	│      markdownpad2-setup激活.txt
	│      markdownpad2-WIN10预览失败时安装.exe
	│      npp_7.3.3_Installer.exe
	│
	└─调试工具
	        fiddler4_4.6.2.0_setup.1453708442.exe
	        Postman-win64-4.10.7-Setup.exe

- for命令实现
	
基本实现思路如下图，

![基本思路](/img/in-post/dos-for.png)

具体做法：

首先，我们看第一条扩展命令参数 /D，

	FOR /D %variable IN (set) DO command [command-parameters]

    如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。

显然，我们需要不仅仅遍历到目录文件夹，同时需要遍历目录底下的文件。

再看下面/R，
	
	FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]

    检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。
    如果在 /R 后没有指定目录规范，则使用当前目录。如果集仅为一个单点(.)字符，
    则枚举该目录树。

通过说明得知，该扩展参数可以遍历到指定根目录的所有目录，什么意思比如， /R D:/ 就可以遍历D盘所有目录文件。


因此使用如下命令便可罗列所有文件清单：
	
	D:\资料\培训\软件工具>for /r %i in (*.*) do @echo %i


结果如下：

	D:\资料\培训\软件工具\1.txt
	D:\资料\培训\软件工具\soft_list.txt
	D:\资料\培训\软件工具\IDE\ideaIU-2017.1.exe
	D:\资料\培训\软件工具\IDE\ideaIU-2017.1注册码.txt
	D:\资料\培训\软件工具\JDK\jdk-8u121-windows-x64-demos.zip
	D:\资料\培训\软件工具\JDK\jdk-8u121-windows-x64_8.0.1210.13.exe

更进一步， 我们可以先使用CALL自行批处理自调，实现带变量的循环调用。什么意思呢? 先看实现：

	::get dirlist
	for /d %%i in (*) do (
	::write dirpath
	echo %%i >> 1.txt 
	::call this command tag :aa with paramter
	call :aa %%i
	)
	:aa
	::in dirlist set catch file list 
	if not %1 == 'ECHO 处于打开状态' 
	for /r "%cd%\%1" %%I in (*.*) do (
	::call this command tag :bb with paramter
	call :bb %%I %cd%\%1
	)
	:bb
	::if not %1 == 'ECHO 处于打开状态'
	set a=%1
	set b=%2
	::repleace dirpath with `---`
	call set c=%%a:%b%=----------------%%
	::write file list
	echo %c%>>1.txt

解释下代码，从注释中也应该能看清楚命令逻辑。 上面的批处理主要涉及到echo、::、：、call、set以及字符串处理的相关命令操作。我们这里只是为了说明for命令，其他有兴趣的可以参考系统文档。第一个for命令就是上例中我们获取到的目录结果集。第二个for是获取该目录下的文件列表。可能有人发现这俩for循环是通过自掉参数传递变量的，因为for条件列表不可以进行变量的直接引用。

最后，上效果：

	|IDE  
	|----------------\ideaIU-2017.1.exe
	|----------------\ideaIU-2017.1注册码.txt
	|----------------\ideaIU-2017.1注册码.txt
	|JDK  
	|----------------\jdk-8u121-windows-x64-demos.zip
	|----------------\jdk-8u121-windows-x64_8.0.1210.13.exe
	|----------------\jdk-8u121-windows-x64_8.0.1210.13.exe
	|数据库及管理工具  
	|----------------\HeidiSQL_9.4.0.5125_Setup.exe
	|----------------\mysql-5.7.17.msi
	|----------------\navicat112_mysql_cs_x64.exe
	|----------------\navicat112_mysql_cs_x64.exe
	|服务器  
	|----------------\apache-tomcat-9.0.0.M19-windows-x64.zip
	|----------------\nginx-1.11.13.zip
	|----------------\nginx-1.11.13.zip
	|构建工具  
	|----------------\apache-maven-3.3.9-bin.zip
	|----------------\apache-maven-3.3.9-bin.zip
	|版本控制工具  
	|----------------\Git_2.12_64.exe
	|----------------\Git_2.12_64.exe
	|编辑器  
	|----------------\gvim80.exe
	|----------------\markdownpad2-setup.exe
	|----------------\markdownpad2-setup激活.txt
	|----------------\markdownpad2-WIN10预览失败时安装.exe
	|----------------\npp_7.3.3_Installer.exe
	|----------------\npp_7.3.3_Installer.exe
	|调试工具  
	|----------------\fiddler4_4.6.2.0_setup.1453708442.exe
	|----------------\Postman-win64-4.10.7-Setup.exe
	|----------------\Postman-win64-4.10.7-Setup.exe

可以看到已经到达预期效果，甚至说再完善之后，完全可以达到tree展示样式，有时间的话，后面我们再完善。

至此，有关for命令的基本用法就结合示例完成了，如果有幸被各位看到，有什么好的建议或者问题欢迎斧正。：）
